
1. Controller 생성 -> 클래스로 생성
2. @Controller 지정
3. 요청에 대한 처리 : 
	메소드 선언 -> 메소드에 @RequestMapping 선언(주소창에 들어올 요청)
				-> 메소드 내부에서 비즈니스 로직 처리
				-> 화면응답
					: return "화면명" -> WEB-INF/view/화면명.jsp 
					
개발자가 직접 객체를 생성하고 메소드 호출하던 처리를 스프링이 한다
객체 생성의 주체가 스프링이 된다. IoC(Inversion of Control:제어의 반전)
- 스프링 IoC는 스프링에게 제어를 위임해서 스프링이 객체를 만들고 관리하는 구조


▶ 화면 연결 형태
	1. Model 
		Model을 해당 메소드의 파라미터로 선언.
		정보 담기 : addAttribute() 
		return : 응답화면명
	2. ModelAndView
		new ModelAndView 로 객체 생성.
		정보 담기 : addObject()
		응답화면명 지정 : setViewName("");
		return : 생성한 ModelAndView 객체 
	
▶ 파라미터 접근 방법
1. HttpServletRequest 객체의 getParameter()
2. @RequestParam
3. 데이터객체(DTO, VO, Domain)

▶ 파라미터는 아닌 특정 값 한 두개 정도를 경로의 형태로 전달하고자 할때
	- @PathVariable 을 사용해 경로에 해당하는 값에 접근













